{
    "project": {},
    "files": {
        "esnext/lib/safeps.js": {
            "name": "esnext/lib/safeps.js",
            "modules": {},
            "classes": {
                "safeps": 1
            },
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "safeps": {
            "name": "safeps",
            "shortname": "safeps",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "esnext/lib/safeps.js",
            "line": 38,
            "description": "Contains methods to safely spawn and manage\nvarious file system processes. It differs\nfrom the standard node.js child_process\n(https://nodejs.org/docs/v0.11.13/api/child_process.html#child_process_child_process)\nmodule in that it intercepts and handles\nmany common errors that might occur when\ninvoking child processes that could cause\nan application to crash. Most commonly, errors\nsuch as ENOENT and EACCESS. This enables\nan application to be both cleaner and more robust.",
            "static": 1
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "esnext/lib/safeps.js",
            "line": 57,
            "description": "Open a file.\nPass your callback to fire when it is safe to open the process",
            "itemtype": "method",
            "name": "openProcess",
            "params": [
                {
                    "name": "fn",
                    "description": "callback",
                    "type": "Function"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 76,
            "description": "Returns whether or not we are running on a windows machine",
            "itemtype": "method",
            "name": "isWindows",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 85,
            "description": "Get locale code - eg: en-AU,\nfr-FR, zh-CN etc.",
            "itemtype": "method",
            "name": "getLocaleCode",
            "params": [
                {
                    "name": "lang",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 98,
            "description": "Given the localeCode, return\nthe language code.",
            "itemtype": "method",
            "name": "getLanguageCode",
            "params": [
                {
                    "name": "localeCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 111,
            "description": "Given the localeCode, return\nthe country code.",
            "itemtype": "method",
            "name": "getCountryCode",
            "params": [
                {
                    "name": "localeCode",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 128,
            "description": "Has spawn sync. Returns true\nif the child_process spawnSync\nmethod exists, otherwise false",
            "itemtype": "method",
            "name": "hasSpawnSync",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 139,
            "description": "Has exec sync. Returns true\nif the child_process execSync\nmethod exists, otherwise false",
            "itemtype": "method",
            "name": "hasExecSync",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 150,
            "description": "Is the path to a file object an executable?\nBoolean result returned as the isExecutable parameter\nof the passed callback.\nnext(err, isExecutable)",
            "itemtype": "method",
            "name": "isExecutable",
            "params": [
                {
                    "name": "path",
                    "description": "path to test",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "true to test sync rather than async",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "callback",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "isExecutable",
                            "description": "",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "returned if opts.sync = true",
                "type": "Boolean"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 198,
            "description": "Is the path to a file object an executable?\nSynchronised version of isExecutable",
            "itemtype": "method",
            "name": "isExecutableSync",
            "params": [
                {
                    "name": "path",
                    "description": "path to test",
                    "type": "String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "isExecutable",
                            "description": "",
                            "type": "Boolean"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 248,
            "description": "Internal: Prepare options for an execution.\nMakes sure all options are populated or exist and\ngives the opportunity to prepopulate some of those\noptions.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "prepareExecutableOptions",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "stdin",
                            "description": "in stream",
                            "type": "Stream",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "stdio",
                            "description": "Child's stdio configuration",
                            "type": "Array",
                            "optional": true,
                            "optdefault": "null"
                        },
                        {
                            "name": "safe",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        },
                        {
                            "name": "env",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "process.env"
                        }
                    ]
                }
            ],
            "return": {
                "description": "opts",
                "type": "Object"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 299,
            "description": "Internal: Prepare result of an execution",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "updateExecutableResult",
            "params": [
                {
                    "name": "result",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "pid",
                            "description": "Number Pid of the child process",
                            "type": "Object"
                        },
                        {
                            "name": "output",
                            "description": "output Array Array of results from stdio output",
                            "type": "Object"
                        },
                        {
                            "name": "stdout",
                            "description": "stdout The contents of output",
                            "type": "Stream"
                        },
                        {
                            "name": "stderr",
                            "description": "stderr The contents of output",
                            "type": "Stream"
                        },
                        {
                            "name": "status",
                            "description": "status The exit code of the child process",
                            "type": "Number"
                        },
                        {
                            "name": "signal",
                            "description": "signal The signal used to kill the child process",
                            "type": "String"
                        },
                        {
                            "name": "error",
                            "description": "The error object if the child process failed or timed out",
                            "type": "Error"
                        }
                    ]
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "output",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "outputPrefix",
                            "description": "",
                            "type": "Object",
                            "optional": true
                        }
                    ]
                }
            ],
            "return": {
                "description": "result",
                "type": "Object"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 359,
            "description": "Internal: prefix data",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "prefixData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "prefix ",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": " '>\\t'"
                }
            ],
            "return": {
                "description": "data",
                "type": "Object"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 375,
            "description": "Internal: Set output data",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "outputData",
            "params": [
                {
                    "name": "data",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "channel ",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "optdefault": " 'stdout'"
                },
                {
                    "name": "prefix",
                    "description": "",
                    "type": "Object"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 397,
            "description": "Syncronised version of safeps.spawn. Will not return until the\nchild process has fully closed. Results can be returned\nfrom the method call or via a passed callback. Even if\na callback is passed to spawnSync, the method will still\nbe syncronised with the child process and the callback will\nonly return after the child process has closed.\n\nSimple usage example:\n\n\tvar safeps = require('safeps');\n\tvar command = ['npm', 'install', 'jade', '--save'];\n\n\t//a lot of the time you won't need the opts argument\n\tvar opts = {\n\t\tcwd: __dirname //this is actually pointless in a real application\n\t};\n\n\tvar result = safeps.spawnSync(command, opts);\n\n\tconsole.log(result.error);\n\tconsole.log(result.status);\n\tconsole.log(result.signal);\n\tconsole.log(\"I've finished...\");",
            "itemtype": "method",
            "name": "spawnSync",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "safe",
                            "description": "Whether to check the executable path.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "stdio",
                            "description": "Child's stdio configuration.",
                            "type": "Array|String",
                            "optional": true
                        },
                        {
                            "name": "customFds",
                            "description": "Deprecated File descriptors for the child to use for stdio.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "detached",
                            "description": "The child will be a process group leader.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "callback",
                    "type": "Function",
                    "optional": true,
                    "props": [
                        {
                            "name": "error",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "{error, pid, output, stdout, stderr, status, signal}",
                "type": "Object"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 480,
            "description": "Wrapper around node's spawn command for a cleaner, more robust and powerful API.\nLaunches a new process with the given command. Command line arguments are\npart of the command parameter (unlike the node.js spawn). Command can be\nan array of command line arguments or a command line string. Opts allows\nadditional options to be sent to the spawning action.\n\nSimple usage example:\n\n\tvar safeps = require('safeps');\n\tvar command = ['npm', 'install','jade','--save'];\n\n\t//a lot of the time you won't need the opts argument\n\tvar opts = {\n\t\tcwd: __dirname //this is actually pointless in a real application\n\t}\n\tfunction myCallback(error, stdout, stderr, status, signal){\n\t\tconsole.log(error);\n\t\tconsole.log(status);\n\t\tconsole.log(signal);\n\t\tconsole.log(\"I've finished...\");\n\t}\n\tsafeps.spawn(command, opts, myCallback);",
            "itemtype": "method",
            "name": "spawn",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "safe",
                            "description": "Whether to check the executable path.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "stdio",
                            "description": "Child's stdio configuration.",
                            "type": "Array|String",
                            "optional": true
                        },
                        {
                            "name": "customFds",
                            "description": "Deprecated File descriptors for the child to use for stdio.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs.",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "detached",
                            "description": "The child will be a process group leader.",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "callback",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 642,
            "description": "Spawn multiple processes in the one method call.\nLaunches new processes with the given array of commands.\nEach item in the commands array represents a command parameter\nsent to the safeps.spawn method, so each item can be a command line\nstring or an array of command line inputs. It is also possible\nto pass a single command string and in this case calling\nspawnMultiple will be effectively the same as calling safeps.spawn.",
            "itemtype": "method",
            "name": "spawnMultiple",
            "params": [
                {
                    "name": "commands",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "concurrency",
                            "description": "Whether to spawn processes concurrently.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process.",
                            "type": "String"
                        },
                        {
                            "name": "stdio",
                            "description": "Child's stdio configuration.",
                            "type": "Array|String"
                        },
                        {
                            "name": "customFds",
                            "description": "Deprecated File descriptors for the child to use for stdio.",
                            "type": "Array"
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs.",
                            "type": "Object"
                        },
                        {
                            "name": "detached",
                            "description": "The child will be a process group leader.",
                            "type": "Boolean"
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number"
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "callback",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "results",
                            "description": "array of spawn results",
                            "type": "Array"
                        },
                        {
                            "name": "results[i].stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "results[i].signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 709,
            "description": "Syncronised version of safeps.exec. Runs a command in a shell and\nbuffers the output. Will not return until the\nchild process has fully closed. Results can be returned\nfrom the method call or via a passed callback. Even if\na callback is passed to execSync, the method will still\nbe syncronised with the child process and the callback will\nonly return after the child process has closed.\nNote:\nStdout and stderr should be Buffers but they are strings unless encoding:null\nfor now, nothing we should do, besides wait for joyent to reply\nhttps://github.com/joyent/node/issues/5833#issuecomment-82189525.",
            "itemtype": "method",
            "name": "execSync",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "true to execute sync rather than async",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "encoding",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'utf8'"
                        },
                        {
                            "name": "shell",
                            "description": "Shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxBuffer",
                            "description": "Largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200*1024"
                        },
                        {
                            "name": "killSignal",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'SIGTERM'"
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "stdout",
                            "description": "out buffer",
                            "type": "Buffer|String"
                        },
                        {
                            "name": "stderr",
                            "description": "error buffer",
                            "type": "Buffer|String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "{error, stdout, stderr}",
                "type": "Object"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 774,
            "description": "Wrapper around node's exec command for a cleaner, more robust and powerful API.\nRuns a command in a shell and buffers the output.\nNote:\nStdout and stderr should be Buffers but they are strings unless encoding:null\nfor now, nothing we should do, besides wait for joyent to reply\nhttps://github.com/joyent/node/issues/5833#issuecomment-82189525.",
            "itemtype": "method",
            "name": "exec",
            "params": [
                {
                    "name": "command",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "true to execute sync rather than async",
                            "type": "Boolean",
                            "optional": true
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs",
                            "type": "Object",
                            "optional": true
                        },
                        {
                            "name": "encoding",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'utf8'"
                        },
                        {
                            "name": "shell",
                            "description": "Shell to execute the command with (Default: '/bin/sh' on UNIX, 'cmd.exe' on Windows, The shell should understand the -c switch on UNIX or /s /c on Windows. On Windows, command line parsing should be compatible with cmd.exe.)",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "timeout",
                            "description": "",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "0"
                        },
                        {
                            "name": "maxBuffer",
                            "description": "Largest amount of data (in bytes) allowed on stdout or stderr - if exceeded child process is killed.",
                            "type": "Number",
                            "optional": true,
                            "optdefault": "200*1024"
                        },
                        {
                            "name": "killSignal",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'SIGTERM'"
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number",
                            "optional": true
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process.",
                            "type": "Number",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "stdout",
                            "description": "out buffer",
                            "type": "Buffer|String"
                        },
                        {
                            "name": "stderr",
                            "description": "error buffer",
                            "type": "Buffer|String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 835,
            "description": "Exec multiple processes in the one method call.\nLaunches new processes with the given array of commands.\nEach item in the commands array represents a command parameter\nsent to the safeps.exec method, so each item can be a command line\nstring or an array of command line inputs. It is also possible\nto pass a single command string and in this case calling\nexecMultiple will be effectively the same as calling safeps.exec.",
            "itemtype": "method",
            "name": "execMultiple",
            "params": [
                {
                    "name": "commands",
                    "description": "",
                    "type": "Array|String"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "concurrency",
                            "description": "Whether to exec processes concurrently.",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "1"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process.",
                            "type": "String"
                        },
                        {
                            "name": "stdio",
                            "description": "Child's stdio configuration.",
                            "type": "Array|String"
                        },
                        {
                            "name": "customFds",
                            "description": "Deprecated File descriptors for the child to use for stdio.",
                            "type": "Array"
                        },
                        {
                            "name": "env",
                            "description": "Environment key-value pairs.",
                            "type": "Object"
                        },
                        {
                            "name": "detached",
                            "description": "The child will be a process group leader.",
                            "type": "Boolean"
                        },
                        {
                            "name": "uid",
                            "description": "Sets the user identity of the process.",
                            "type": "Number"
                        },
                        {
                            "name": "gid",
                            "description": "Sets the group identity of the process.",
                            "type": "Number"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "callback",
                    "type": "Function",
                    "props": [
                        {
                            "name": "error",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "results",
                            "description": "array of exec results",
                            "type": "Array"
                        },
                        {
                            "name": "results[i].stdout",
                            "description": "out buffer",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].stderr",
                            "description": "error buffer",
                            "type": "Stream"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 900,
            "description": "Determine an executable path from\nthe passed array of possible file paths.\nCalled by getExecPath to find a path for\na given executable name.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "determineExecPath",
            "params": [
                {
                    "name": "possibleExecPaths",
                    "description": "string array of file paths",
                    "type": "Array"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "sync",
                            "description": "true to execute sync rather than async",
                            "type": "Boolean",
                            "optional": true
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "execPath",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 954,
            "description": "Get the system's environment paths.",
            "itemtype": "method",
            "name": "getEnvironmentPaths",
            "return": {
                "description": "string array of file paths",
                "type": "Array"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 967,
            "description": "Get the possible paths for\nthe passed executable using the\nstandard environment paths. Basically,\nget a list of places to look for the\nexecutable. Only safe for non-Windows\nsystems.",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getStandardExecPaths",
            "params": [
                {
                    "name": "execName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string array of file paths",
                "type": "Array"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 994,
            "description": "Get the possible paths for\nthe passed executable using the\nstandard environment paths. Basically,\nget a list of places to look for the\nexecutable. Makes allowances for Windows\nexecutables possibly needing an extension\nto ensure execution (.exe, .cmd, .bat).",
            "access": "private",
            "tagname": "",
            "itemtype": "method",
            "name": "getStandardExecPaths",
            "params": [
                {
                    "name": "execName",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "string array of file paths",
                "type": "Array"
            },
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1033,
            "description": "Cache of executable paths",
            "access": "private",
            "tagname": "",
            "itemtype": "property",
            "name": "execPathCache",
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1040,
            "description": "Given an executable name, search and find\nits actual path. Will search the standard\nfile paths defined by the environment to\nsee if the executable is in any of those paths.",
            "itemtype": "method",
            "name": "getExecPath",
            "params": [
                {
                    "name": "execName",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "foundPath",
                            "description": "path to the executable",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1106,
            "description": "Get home path. Returns the user's home directory.\nBased upon home function from: https://github.com/isaacs/osenv",
            "itemtype": "method",
            "name": "getHomePath",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "homePath",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1140,
            "description": "Path to the evironment's temporary directory.\nBased upon tmpdir function from: https://github.com/isaacs/osenv",
            "itemtype": "method",
            "name": "getTmpPath",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next.err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "next.tmpPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1200,
            "description": "Path to the evironment's GIT directory.\nAs 'git' is not always available in the environment path, we should check\ncommon path locations and if we find one that works, then we should use it.",
            "itemtype": "method",
            "name": "getGitPath",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next.err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "next.gitPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1270,
            "description": "Path to the evironment's Node directory.\nAs 'node' is not always available in the environment path, we should check\ncommon path locations and if we find one that works, then we should use it",
            "itemtype": "method",
            "name": "getNodePath",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next.err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "next.nodePath",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1341,
            "description": "Path to the evironment's NPM directory.\nAs 'npm' is not always available in the environment path, we should check\ncommon path locations and if we find one that works, then we should use it",
            "itemtype": "method",
            "name": "getNpmPath",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "cache",
                            "description": "",
                            "type": "Object",
                            "optional": true,
                            "optdefault": "true"
                        }
                    ]
                },
                {
                    "name": "next.err",
                    "description": "",
                    "type": "Error"
                },
                {
                    "name": "next.npmPath",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1417,
            "description": "Initialize a git Repository.\nRequires internet access.",
            "itemtype": "method",
            "name": "initGitRepo",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "path to initiate local repository",
                            "type": "String"
                        },
                        {
                            "name": "remote",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'origin'"
                        },
                        {
                            "name": "url",
                            "description": "url to git remote repository",
                            "type": "String"
                        },
                        {
                            "name": "branch",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'master'"
                        },
                        {
                            "name": "log",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "output",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "process.cwd()"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "results",
                            "description": "array of spawn results",
                            "type": "Array"
                        },
                        {
                            "name": "results[i].stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "results[i].signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1464,
            "description": "Pull from a git repository if it already exists\non the file system else initialize  new Git repository.\nRequires internet access.",
            "itemtype": "method",
            "name": "initOrPullGitRepo",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "path",
                            "description": "path to local repository",
                            "type": "String"
                        },
                        {
                            "name": "remote",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'origin'"
                        },
                        {
                            "name": "url",
                            "description": "url to git remote repository",
                            "type": "String"
                        },
                        {
                            "name": "branch",
                            "description": "",
                            "type": "String",
                            "optional": true,
                            "optdefault": "'master'"
                        },
                        {
                            "name": "log",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "output",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "process.cwd()"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Error"
                        },
                        {
                            "name": "results",
                            "description": "array of spawn results",
                            "type": "Array"
                        },
                        {
                            "name": "results[i].stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "results[i].status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "results[i].signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1515,
            "description": "Init Node Modules with cross platform support\nsupports linux, heroku, osx, windows",
            "itemtype": "method",
            "name": "initNodeModules",
            "params": [
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object"
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Object"
                        },
                        {
                            "name": "stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        },
        {
            "file": "esnext/lib/safeps.js",
            "line": 1573,
            "description": "Spawn Node Modules with cross platform support\nsupports linux, heroku, osx, windows\nspawnNodeModule(name:string, args:array, opts:object, next:function)\nBetter than https://github.com/mafintosh/npm-execspawn as it uses safeps",
            "itemtype": "method",
            "name": "spawnNodeModule",
            "params": [
                {
                    "name": "name",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                },
                {
                    "name": "opts",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "name",
                            "description": "name of node module",
                            "type": "String"
                        },
                        {
                            "name": "cwd",
                            "description": "Current working directory of the child process.",
                            "type": "String",
                            "optional": true,
                            "optdefault": "process.cwd()"
                        }
                    ]
                },
                {
                    "name": "next",
                    "description": "",
                    "type": "Function",
                    "props": [
                        {
                            "name": "err",
                            "description": "",
                            "type": "Object"
                        },
                        {
                            "name": "stdout",
                            "description": "out stream",
                            "type": "Stream"
                        },
                        {
                            "name": "stderr",
                            "description": "error stream",
                            "type": "Stream"
                        },
                        {
                            "name": "status",
                            "description": "node.js exit code",
                            "type": "Number"
                        },
                        {
                            "name": "signal",
                            "description": "unix style signal such as SIGKILL or SIGHUP",
                            "type": "String"
                        }
                    ]
                }
            ],
            "class": "safeps"
        }
    ],
    "warnings": []
}